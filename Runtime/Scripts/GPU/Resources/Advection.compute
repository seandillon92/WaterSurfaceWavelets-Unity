#pragma enable_d3d11_debug_symbols
#pragma kernel Advection
#pragma kernel Diffusion
#pragma kernel Copy
#pragma kernel ManualPoint
#pragma kernel Dissipation
#pragma kernel UpdateEdge

#define tau 6.28318530718
#define theta_dx tau/16

Texture3D<float> Read;
Texture3D<float> Read2;
Texture2D<float> heights;
Texture2D<float2> gradients;
RWTexture3D<float> Write;

float Default[16];
float deltaTime;
float groupSpeed;
float resolution_factor;
SamplerState linearClampSampler;
SamplerState pointClampSampler;

float2 dx;
float2 x_min;
float2 env_dx;

float3 manual_point;
float manual_point_value;
float dissipation;

float2 idxToPos(float2 idx)
{
    float2 pos = x_min + (idx + float2(0.5, 0.5)) * dx;
    return pos;
}

float2 posToGrid(float2 pos)
{
    return ((pos - x_min)) / dx - float2(0.5, 0.5);
}


float iTheta2Theta(float itheta)
{
    return (itheta + 0.5) * theta_dx;
}

uint posModuloItheta(float itheta)
{
    return (itheta % 16 + 16) % 16;
}

float Theta2iTheta(float theta)
{
    float r = (theta / theta_dx) -0.5;
    if (r < 0)
        return 16 + r;
    return r;
}

float2 groupVelocity(uint3 id)
{
    float cg = groupSpeed * resolution_factor;
    float theta = iTheta2Theta(id.z);
    return cg * float2(cos(theta), sin(theta));
}

float getHeight(float2 pos)
{
    uint x, y;
    heights.GetDimensions(x, y);
    float2 gridPos = pos / env_dx - float2(0.5, 0.5) + float2(x / 2, y / 2);
    float height =
        heights.SampleLevel(
            linearClampSampler,
            float2((gridPos.x + 0.5) / x, (gridPos.y + 0.5) / y),
    0).r;
    return height * length(env_dx);
}

float2 getGradient(float2 pos)
{
    uint x, y;
    float2 gradient;
    gradients.GetDimensions(x, y);
    
    float2 gridPos = pos / env_dx - float2(1, 0.5) + float2(x / 2, y / 2);
    gradient.x =
        gradients.SampleLevel(
            linearClampSampler,
            float2((gridPos.x + 0.5) / x, (gridPos.y + 0.5) / y), 0).r;
    
    gridPos = pos / env_dx - float2(0.5, 1) + float2(x / 2, y / 2);
    gradient.y =
        gradients.SampleLevel(
            linearClampSampler,
            float2((gridPos.x + 0.5) / x, (gridPos.y + 0.5) / y), 0).g;
    
    return length(gradient) == 0 ? gradient : normalize(gradient.xy);
}

float3 boundaryReflection(float3 pos)
{
    float height = getHeight(pos.xy);
    if (height >= 0)
    {
        return pos;
    }
    
    float2 n = getGradient(pos.xy);
    float2 kdir = float2(cos(iTheta2Theta(pos.z)), sin(iTheta2Theta(pos.z)));
    pos.xy = pos.xy - 2.0f * height * n;
    kdir = kdir - 2.0f * dot(kdir, n) * n;
    float reflected_theta = atan2(kdir.y, kdir.x);
    float reflected_itheta = Theta2iTheta(reflected_theta);
    return float3(pos.xy, reflected_itheta);
}



float sample(float3 coord)
{
    float2 pixel = coord.xy + float2(0.5, 0.5);
    float2 center = floor(pixel) + float2(0.5, 0.5);
    float2 fract = frac(abs(pixel - center));
    float2 centerGrid = center - float2(0.5f, 0.5f); // center in grid coordinates
    
    float2 direction = sign(pixel - center);
    
    //TODO use a weight mask
    float w_s = getHeight(idxToPos(centerGrid)) < 0.0f ? 0.0f : 1.0f;
    float w_x = getHeight(idxToPos(centerGrid + float2(direction.x, 0))) < 0.0f ? 0.0f : 1.0f;
    float w_y = getHeight(idxToPos(centerGrid + float2(0, direction.y))) < 0.0f ? 0.0f : 1.0f;
    float w_xy = getHeight(idxToPos(centerGrid + direction)) < 0.0f ? 0.0f : 1.0f;
    
    uint x, y, z, levels;
    Read.GetDimensions(0, x, y, z, levels);
    
    // bilinear interpolation
    float v_s = Read.SampleLevel(pointClampSampler, float3(center.x / x, center.y/ y, (coord.z + 0.5) / z), 0);
    float v_x = Read.SampleLevel(pointClampSampler, float3((center.x + direction.x) / x, center.y / y, (coord.z + 0.5) / z), 0);
    float v_y = Read.SampleLevel(pointClampSampler, float3(center.x / x, (center.y + direction.y) / y, (coord.z + 0.5) / z), 0);
    float v_xy = Read.SampleLevel(pointClampSampler, float3((center.x + direction.x) / x, (center.y + direction.y) / y, (coord.z + 0.5) / z), 0);
    
    float v_h1 = lerp(v_s, v_y, w_y * fract.y);
    float v_h2 = lerp(v_x, v_xy, w_xy * fract.y);
    float v = lerp(v_h1, v_h2, w_x * fract.x);
    
    return v;
}

[numthreads(8, 8, 8)]
void Diffusion(uint3 id : SV_DispatchThreadID)
{
    float ls = getHeight(idxToPos(float2(id.x, id.y)));
    float gamma = 2 * 0.025 * groupSpeed * deltaTime / length(dx);
          // do diffusion only if you are 2 grid nodes away from boudnary
    if (ls >= 4 * length(dx))
    {
        Write[id] =
                (1 - gamma) * Read[id] +
                gamma * 0.5 *
                    (Read[uint3(id.xy, posModuloItheta(id.z + 1))] +
                     Read[uint3(id.xy, posModuloItheta(id.z - 1))]);
    }
    else
    {
        Write[id] = Read[id];
    }
}

[numthreads(8, 8, 8)]
void Advection(uint3 id : SV_DispatchThreadID)
{
    
    float3 pos = id;
    pos.xy = idxToPos(id.xy);
    float height = getHeight(pos.xy);
    if (height >= 0)
    {
        uint x, y, z;
        Write.GetDimensions(x, y, z);
        float2 vel = groupVelocity(id);
        pos.x -= deltaTime * vel.x;
        pos.y -= deltaTime * vel.y;
        pos = boundaryReflection(pos);
        height = getHeight(pos.xy);
        if (height >= 0)
        {
            float2 gridPos = posToGrid(pos.xy);
            if (gridPos.x < 0 ||
                gridPos.x > x - 1 ||
                gridPos.y < 0 ||
                gridPos.y > y - 1)
            {
                Write[id] = Default[id.z];
            }
            else
            {
                float read = sample(float3(gridPos.xy, pos.z));
                Write[id] = read;
            }

        }
        else
        {
            Write[id] = Read[id];
        }
        
    }
}

[numthreads(8,8,8)]
void UpdateEdge(uint3 id : SV_DispatchThreadID)
{
    uint x, y, z;
    
    Write.GetDimensions(x, y, z);
    if (id.x == 0 || id.y == 0 || id.x == x - 1 || id.y == y - 1)
    {
        uint3 coords = id;
        coords = clamp(coords, uint3(0, 0, 0), uint3(x - 3, y - 3, 16));
        Write[id] = Read[coords];
    }
}

[numthreads(8, 8, 8)]
void Copy(uint3 id : SV_DispatchThreadID)
{
    float read2 = clamp(Read2[id], 0, 0.1f);
    Write[id + uint3(1, 1, 0)] = saturate(Read[id] + read2);
}

[numthreads(8,8,8)]
void Dissipation(uint3 id : SV_DispatchThreadID)
{
    Write[id] = Read[id] * dissipation;
}

void ManualPointZ(uint theta, float theta_t, uint x, float x_t)
{
    float z = manual_point.y;
    float t = frac(z);
    uint lowZ = uint(floor(z));
    uint highZ = uint(ceil(z));
    
    if (lowZ == highZ)
    {

        float x_val = lerp(0, manual_point_value, x_t);
        float z_val = lerp(0, x_val, t);
        float theta_val = lerp(0, z_val, theta_t);
        Write[uint3(x, lowZ, theta)] += theta_val;
    }
    else
    {
        float x_val = lerp(0, manual_point_value, x_t);
        float z_val = lerp(0, x_val, 1-t);
        float theta_val = lerp(0, z_val, theta_t);
        Write[uint3(x, lowZ, theta)] += theta_val;
        
        x_val = lerp(0, manual_point_value, x_t);
        z_val = lerp(0, x_val, t);
        theta_val = lerp(0, z_val, theta_t);
        Write[uint3(x, highZ, theta)] += theta_val;
    }

}

void ManualPointX(uint theta, float theta_t)
{
    float x = manual_point.x;
    float t = frac(x);
    uint lowX = uint(floor(x));
    uint highX = uint(ceil(x));
    if (lowX == highX)
    {
        ManualPointZ(theta, theta_t, lowX, 1);
    }
    else
    {
        ManualPointZ(theta, theta_t, lowX, 1 - t);
        ManualPointZ(theta, theta_t, highX, t);
    }
}

[numthreads(1,1,1)]
void ManualPoint(uint3 id : SV_DispatchThreadID)
{
    float theta = manual_point.z;
    
    float t = frac(theta);
    
    
    uint lowTheta = (int(floor(theta)) % 16 + 16) % 16;
    uint highTheta = (int(ceil(theta)) % 16 + 16) % 16;

    if (lowTheta == highTheta)
    {
        
        ManualPointX(lowTheta, 1);
    }
    else
    {
        ManualPointX(min(lowTheta, highTheta), 1 - t);
        ManualPointX(max(lowTheta, highTheta), t);
    }
}
